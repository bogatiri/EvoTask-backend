generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  confirmationCode  String?         @default(uuid()) @map("confirmation_code")
  confirmationExpires DateTime?                      @map("confirmation_expires")

  email             String          @unique
  name              String?
  lastName          String?
  organization      String?
  post              String?
  about             String?
  password          String
  phone             String?
  avatar            String?         @default("https://images.unsplash.com/photo-1477093782505-e10aaeb27c6d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1ODAyNjN8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTc5NDY1NDV8&ixlib=rb-4.0.3&q=80&w=1080")
  workInterval      Int?            @default(50)     @map("work_interval")
  breakInterval     Int?            @default(10)     @map("break_interval")
  intervalsCount    Int?            @default(7)      @map("intervals_count")
  sidebarWidth      String?         @default("20")     @map("sidebar_width")


  sprints           Sprint[]
  tasks             Task[]
  roles             Roles[]         @relation("UserRoles")
  cards             Card[]          @relation("UserCards")
  card              Card[]
  boards            Board[]         @relation("UserBoards")
  board             Board[]

  chats             Chat[]          @relation("UserChats")
  messages          Message[]
  attachments       Attachment[]
  comments          Comment[]

  @@map("user")
}
model Task {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              String
  priority          Priority?
  isCompleted       Boolean?        @default(false) @map("is_completed")

  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")
  
  @@map("task")
}

model Board {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              String
  description       String?         @db.Text
  status            Status?

  imageId           String?
  imageThumbUrl     String?         @db.Text
  imageFullUrl      String?         @db.Text
  imageUserName     String?         @db.Text
  imageLinkHTML     String?         @db.Text

  creator           User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  roles             Roles[]
  users             User[]          @relation("UserBoards")
  sprints           Sprint[]
  lists             List[]          
  attachments       Attachment[]
  comments          Comment[]
  chats             Chat[]  

  @@map("board")
}
model List {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              String
  order             Int?
  description       String?

  type              Type_list? 

  board             Board?          @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId           String?         @map("board_id")

  sprint            Sprint?         @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId          String?         @map("sprint_id")
  

  cards             Card[]
  comments          Comment[]
  chats             Chat[]
  
  @@map("list")
}
model Card{
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              String
  priority          Priority?
  points            String?
  order             Int?
  completed         Boolean?        @default(false)
  description       String?         @db.Text

  parentId          String?         @map("parent_id")
  subtasks          Card[]          @relation("CardToCard")
  isSubtaskVisible  Boolean?        @default(false)
  parent            Card?           @relation("CardToCard", fields: [parentId], references: [id], onDelete: Cascade)

  list              List?            @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId            String?          @map("list_id")

  users             User[]          @relation("UserCards")

  creator           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")

    sprint            Sprint?         @relation(fields: [sprintId], references: [id], onDelete: Cascade)
  sprintId          String?         @map("sprint_id")

  attachments       Attachment[]
  comments          Comment[]
  chats             Chat[]

  @@map("card")
  @@index([listId])
}
model Sprint{
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              String?
  goal              String?
  startDate         DateTime?       @map("start_date")
  endDate           DateTime?       @map("end_date")
  status            Status?

  creator           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")

  board             Board           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId           String          @map("board_id")

  cards             Card[]
  list              List[]

  @@map("sprint")
}
model Chat {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              String 
  
  board             Board?           @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId           String?          @map("board_id")

  list              List?            @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId            String?          @map("list_id")

  card              Card?            @relation(fields:[cardId], references: [id], onDelete: Cascade)
  cardId            String?          @map("card_id")

  user              User[]           @relation("UserChats")

  messages          Message[]       
  
  @@map("chat")
}
model Message {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  text              String

  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String          @map("user_id")

  chat              Chat            @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId            String          @map("chat_id")

  attachments       Attachment[]

  @@map("message")
}
model Attachment {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  url               String

  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  board             Board?          @relation(fields: [boardId], references: [id])
  boardId           String?         @map("board_id")

  card              Card?           @relation(fields:[cardId], references: [id])
  cardId            String?         @map("card_id")

  messages          Message?        @relation(fields: [messageId], references: [id])
  messageId         String?         @map("message_id")
  
  @@map("attachment")
}
model Roles {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  name              Name_Roles?

  users             User[]          @relation("UserRoles")

  board             Board?          @relation(fields: [boardId], references: [id],  onDelete: Cascade)
  boardId           String?         @map("board_id")
}
model Comment {
  id                String          @id              @default(uuid())
  createdAt         DateTime        @default(now())  @map("created_at")
  updatedAt         DateTime        @updatedAt       @map("updated_at")

  text              String

  user              User            @relation(fields: [userId], references: [id])
  userId            String          @map("user_id")

  card              Card?           @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId            String?         @map("card_id")
  
  board             Board?          @relation(fields: [boardId], references: [id],  onDelete: Cascade)
  boardId           String?         @map("board_id")

  list              List?           @relation(fields: [listId], references: [id],  onDelete: Cascade)
  listId            String?         @map("list_id")

  @@map("comment")
}

enum Priority{
  low
  medium
  high
}

enum Name_Roles{
  scrum_master
  project_owner
  team_member
}

enum Type_list{
  backlog
  to_do
  in_progress
  done
  blocked
  feedback
}

enum Status{
  planned
  active
  completed
}
